sum(ok)
meta$stid[ok]
meta$station_id[ok]
unique(meta$station_id[ok])
stid <- unique(meta$station_id[ok])
stid
param
param1info <- ele2param(esd2ele(param), src="metno.frost")
param1 <- gsub('*', timeresolutions, param1info$param, fixed=TRUE)
param1
param1info
i <- meta$station_id %in% stid & meta$variable %in% param
sum(i)
length(i)
sum(meta$station_id %in% stid)
meta$variable %in% param
sum(meta$variable %in% param)
names(meta)
meta$element
param1
param1info$element
i <- meta$station_id %in% stid & meta$element %in% param1info$element
sum(i)
meta$variable[i]
meta$station_id[i]
is.null(start)
start
meta$start[i]
start<min(meta$start[i])
min(meta$start[i])
meta$start[which.min(meta$start[i])]
meta$start[i][which.min(meta$start[i])]
end>max(meta$end[i])
max(meta$end[i])
meta$end[i]
sum(is.na(meta$end))
sum(!is.na(meta$end))
end
max(meta$end[i], na.rm=TRUE)
max(meta$end, na.rm=TRUE)
end.i <- meta$end[i]
end.i[is.na(end.i)] <- as.Date(Sys.time())
end.i
end.i <- meta$end[i]
end.i[is.na(end.i)] <- as.Date(Sys.time())
end>max(end.i)
any(is.na(meta$start))
any(is.na(meta$end))
class(i)
length(i)
start
end
sum(meta$start<=end & meta$end>=start )
meta.end <- meta$end
meta.end[is.na(meta.end)] <- as.Date(Sys.time())
sum( meta$start<=end & meta.end>=start )
sum(!meta$start<=end & meta.end>=start )
sum(!(meta$start<=end & meta.end>=start))
which(!(meta$start<=end & meta.end>=start))
meta$start[which(!(meta$start<=end & meta.end>=start))]
meta.end[which(!(meta$start<=end & meta.end>=start))]
j <- i & meta$start<=end & meta.end>=start
sum(j)
stid
start
end
timeresolutions
param1
levels
timeoffsets
performancecategories
exposurecategories
qualities
length(stid)
meta$station_id[j]
length(j)
length(meta$station_id)
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
stid
url <- paste0(
"https://", client_id, "@frost.met.no/observations/v0.jsonld",
"?sources=", paste0('SN',stid),
"&referencetime=", paste0(start,"/",end),
"&timeresolutions=", timeresolutions,
"&elements=", param1,
"&levels=", levels,
"&timeoffsets=", timeoffsets,
"&performancecategories=", performancecategories,
"&exposurecategories=", exposurecategories,
"&qualities=", qualities
)
print(url)
xs <- try(jsonlite::fromJSON(URLencode(url),flatten=TRUE))
class(xs)
data <- xs$data
dim(data)
length(data)
names(data)
class(data)
unique(data$sourceId)
data$sourceId
url
url <- paste0(
"https://", client_id, "@frost.met.no/observations/v0.jsonld",
"?sources=", paste0('SN',paste(stid,collapse=",")),
"&referencetime=", paste0(start,"/",end),
"&timeresolutions=", timeresolutions,
"&elements=", param1,
"&levels=", levels,
"&timeoffsets=", timeoffsets,
"&performancecategories=", performancecategories,
"&exposurecategories=", exposurecategories,
"&qualities=", qualities
)
url
xs <- try(jsonlite::fromJSON(URLencode(url),flatten=TRUE))
url <- paste0(
"https://", client_id, "@frost.met.no/observations/v0.jsonld",
"?sources=", paste(paste0('SN',stid),collapse=","),
"&referencetime=", paste0(start,"/",end),
"&timeresolutions=", timeresolutions,
"&elements=", param1,
"&levels=", levels,
"&timeoffsets=", timeoffsets,
"&performancecategories=", performancecategories,
"&exposurecategories=", exposurecategories,
"&qualities=", qualities
)
url
xs <- try(jsonlite::fromJSON(URLencode(url),flatten=TRUE))
class(xs)
dim(xs)
data <- xs$data
class(data)
names(data.frame)
names(data)
dim(data)
data$sourceId
unique(data$sourceId)
length(unique(data$sourceId))
data("t2m.NORDKLIM")
class(t2m.NORDKLIM)
dim(t2m.NORDKLIM)
t2m.NORDKLIM[1:109,1]
data$observations
## KMP 2020-01-22: Remove data.table dependency
var <- sapply(data$observations, function(x) x$value)
time <- as.Date(data$referenceTime)
var
time
length(var)
length(time)
length(data$sourceId)
names(attributes(t2m.NORDKLIM))
attr(t2m.NORDKLIM,"location")
dim(t2m.NORDKLIM)
seq(min(time),max(time),by="month")
## KMP 2020-01-22: Remove data.table dependency
var <- sapply(data$observations, function(x) x$value)
time <- as.Date(data$referenceTime)
stid <- data$sourceId
tvec <- seq(min(time), max(time),
by = switch(timeresolutions, "P1D"="day", "P1M"="month"))
tvec
data$sourceId
unique(data$sourceId)
X <- matrix(NA, nrow=length(tvec), ncol=length(unique(data$sourceId)))
## KMP 2020-01-22: Remove data.table dependency
var <- sapply(data$observations, function(x) x$value)
time <- as.Date(data$referenceTime)
data$sourceId
tvec <- seq(min(time), max(time),
by = switch(timeresolutions, "P1D"="day", "P1M"="month"))
stid.X <- unique(data$sourceId))
X <- matrix(NA, nrow=length(tvec), ncol=length(stid.X))
## KMP 2020-01-22: Remove data.table dependency
var <- sapply(data$observations, function(x) x$value)
time <- as.Date(data$referenceTime)
data$sourceId
tvec <- seq(min(time), max(time),
by = switch(timeresolutions, "P1D"="day", "P1M"="month"))
stid.X <- unique(data$sourceId)
X <- matrix(NA, nrow=length(tvec), ncol=length(stid.X))
dim(X)
1:ncol(X)
i <- 1
var.i <- var[data$sourceId==stid.X[i]]
time.i <- time[data$sourceId==stid.X[i]]
var.i
time.i
j <- sapply(time.i, function(x) which(tvec==x))
j
X[j,i] <- var.i
X
i <- 2
j <- sapply(time[data$sourceId==stid.X[i]], function(x) which(tvec==x))
X[j,i] <- var[data$sourceId==stid.X[i]]
i <- 3
j <- sapply(time[data$sourceId==stid.X[i]], function(x) which(tvec==x))
X[j,i] <- var[data$sourceId==stid.X[i]]
X
## KMP 2020-01-22: Remove data.table dependency
var <- sapply(data$observations, function(x) x$value)
time <- as.Date(data$referenceTime)
length(unique(data$sourceId))==1
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
var
data$sourceId[1:190]
gsub("[A-Z]|:.*","",toupper(sourceId))
## KMP 2020-01-22: Remove data.table dependency
sourceId <- unique(data$sourceId)
gsub("[A-Z]|:.*","",toupper(sourceId))
meta$loc[meta$station_id==stid]
stid <- gsub("[A-Z]|:.*","",toupper(sourceId))
i <- sapply(stid, function(x) which(meta$station_id==x)[1])
i
meta$station_id[i]
meta$lat[i]
meta$lon[i]
meta$location[i]
stid <- gsub("[A-Z]|:.*","",toupper(sourceId))
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
stid <- gsub("[A-Z]|:.*","",toupper(sourceId))
i <- sapply(stid, function(x) which(meta$station_id==x)[1])
stid
print(i)
meta
meta$station_id
param
stid <- gsub("[A-Z]|:.*","",toupper(sourceId))
i <- sapply(stid, function(x) which(meta$station_id==x)[1])
METNO.FROST <- as.station(var, stid=stid, loc=meta$location[i],
param=param, quality=qualities,
cntr=meta$country[i],
lon=meta$longitude[i],
lat=meta$latitude[i],
alt=meta$altitude[i],
src='METNO.FROST',
url="http://frost.met.no",
longname=param1info$longname,
unit=param1info$unit,
aspect="original",
reference="Frost API (http://frost.met.no)",
info="Frost API (http://frost.met.no)"
)
METNO.FROST
plot(METNO.FROST)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/metno.frost.R')
source('~/git/esd/R/station.R')
source('~/git/esd/R/metno.frost.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/metno.frost.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
stperiod$lat
source('~/git/esd/R/metno.frost.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
library(esd9)
library(esd)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(12,14), lat=c(59,61), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
dim(tit)
dim(tut)
class(tut)
plot(tut)
tut <- metno.frost.station(lon=c(10,15), lat=c(58,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(10,15), lat=c(58,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
sum(ndata)
ndata
end.j
start.j
meta$start[j]
start
inherits(meta$start,"character") & inherits(start,"Date")
class(start)
start
end
is.date
is.dates
is.dates(start)
is.dates(meta$start)
start
strftime(start, format="%Y")
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(10,15), lat=c(58,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(10,15), lat=c(58,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
ndata
source('~/git/esd/R/station.R')
tut <- metno.frost.station(lon=c(10,15), lat=c(58,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='monthly', verbose=TRUE, save2file=FALSE)
plot(tut)
map(tut)
map(tut, FUN="trend")
map(tut, FUN="nt")
map(tut, FUN=length)
map(tut, FUN="ndata")
esd::nv()
map(tut, FUN="nv")
tut <- metno.frost.station(lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', timeresolutions='daily', verbose=TRUE, save2file=FALSE)
dim(tut)
map(tut)
map(tut, FUN="nv")
map(tut, FUN="trend")
range(index(tut))
diagnose(tut)
nvtut <- apply(tut, 2, nv)
nvtut
ok <- apply(tut, 2, nv)>(365*20)
sum(ok)
tut.long <- subset(tut, is=ok)
dim(tut.lnog)
dim(tut.long)
map(tut.long, FUN="trend")
plot(tut.long)
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
grepl("frost",tolower(s))
!is.null(it)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
start
end
print(args(...))
print(args())
print(args(\dots))
list(...)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
args
"start" %in% names(args)
args$start
gargs <- NULL
gargs$start
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
x <- do.call(metno.frost.station, timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path, args)
c(timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path, args)
list(timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path, args)
list(timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path, unlist(args))
abc <- list("A"=1, "B"=2, "C"=3)
xyz <- list("X"=25, "Y"=26, "Z"=27)
c(abc,xyz)
class(c(abc,xyz))
c(list(timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path), args)
x <- do.call(metno.frost.station, c(list(timeresolutions=timeres,
stid=stid[param==param0], param=param0, verbose=verbose,
path=path), args))
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(tut)
tut
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
tut
source('~/git/esd/R/station.R')
tut
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(x)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(tut)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNO.FROST.MONTH", lon=c(10,12), lat=c(59,62), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(tut)
plot(tut)
map(tut)
tut <- station(src="METNO.FROST.MONTH", lon=c(0,15), lat=c(55,65), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(tut)
map(tut)
diagnose(tit)
diagnose(tut)
tut <- station(src="METNO.FROST.DAY", lon=c(0,15), lat=c(55,65), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
tut <- station(src="METNO.FROST.DAY", lon=c(10,13), lat=c(58,61), param='t2m', start='1980-01-01', end='2020-01-01', verbose=TRUE, save2file=FALSE)
dim(tut)
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
print(s)
is.null(path.metnod)
path <- paste("data.",toupper(s),sep="")
is.null(url.metnod
)
user
url= 'ftp://ftp.met.no/projects/chasepl/test'
param0!='dd'
param0
param1 <- esd2ele(param0)
param1
!is.null(param1)
x <- metnod.station(stid=stid,lon=lon,lat=lat,alt=alt,loc=loc,cntr=cntr,
start=start,end=end,qual=qual,param=param0,verbose=verbose,
path=path,url=url,user=user,save2file=save2file)
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
filename
filename
X <- as.list(read.table(filename, dec=".", header=TRUE, as.is=TRUE, fileEncoding = "latin1"))
source('~/git/esd/R/station.R')
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
save2file
eval(parse(text = paste("y <- as.numeric(X$", param1, ")",sep = "")))
ext
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
dim(x)
X
dim(X)
length(X)
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
X
filename
source('~/git/esd/R/station.R')
tut <- station(src="METNOD", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
dim(tut)
map(tut)
map(tut, FUN="mean")
plot(tut)
diagnose(tut)
tut <- station(src="METNOM", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
tut <- station(src="METNOM", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
dim(tut)
source('~/git/esd/R/station.R')
close(X)
close()
library(esd)
source('~/git/esd/R/station.R')
tut <- station(src="METNOM", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
class(X)
close(X)
source('~/git/esd/R/station.R')
tut <- station(src="METNOM", lon=c(10,13), lat=c(58,61), param='t2m', it=c('1980-01-01', '2020-01-01'), verbose=TRUE, save2file=FALSE)
source('~/git/esd/R/station.R')
## station and select.station
## METNOM external -> redirect to station.frost
## METNOD external -> redirect to station.thredds
verbose <- TRUE
s <- select.station(cntr="Norway", param = c("t2m", "precip"), verbose=verbose)
# test esd functions
library(esd)
## station and select.station
## METNOM external -> redirect to station.frost
## METNOD external -> redirect to station.thredds
verbose <- TRUE
s <- select.station(cntr="Norway", param = c("t2m", "precip"), verbose=verbose)
map(s)
map(s, xlim=c(55,85))
map(s, ylim=c(55,85))
map(s, ylim=c(55,85), pch=1)
map(s, ylim=c(55,85), pch=0.5)
map(s, ylim=c(55,85), pch=1, cex=0.5)
map(s, ylim=c(55,85), pch=21, cex=0.5)
map(s, ylim=c(55,85), pch=19, cex=0.5)
map(s, ylim=c(55,85), pch=19, cex=0.1)
map(s, ylim=c(55,85), pch=19, cex=0.1, color="yellow")
map(s, ylim=c(55,85), pch=19, cex=0.1, col="yellow")
map(s, ylim=c(55,85), pch=19, cex=0.1, col="pink")
map(s, ylim=c(55,85), pch=19, cex=0.1, col="coral2")
map(s, ylim=c(55,85), pch=19, cex=0.1, col="blue2")
map(s, ylim=c(55,85), pch=19, cex=0.4, col="blue2")
map(s, ylim=c(55,85), pch=19, cex=0.7, col="blue2")
map(s, ylim=c(55,85), pch=19, cex=0.7, col=adjustcolor("blue2",alpha.f=0.5))
dim(s)
unique(s$source)
unique(s$element[s$source=="NORDKLIM"])
sss <- s[s$source=="NORDKLIM",]
dim(sss)
map(sss)
x <- station(sss, verbose=verbose)
