% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset.station.R
\name{subset.stationmeta}
\alias{subset.stationmeta}
\title{subset.stationmeta <- function(x, it=NULL, is=NULL, ..., verbose=FALSE) {
  if(verbose) print(paste('subset.stationmeta: ',paste(dim(x),collapse=' - ')))
  if (is.null(is)) is <- rep(TRUE,dim(x)[1])
  if (is.list(is)) {
    i <- rep(TRUE,length(x[[1]]))
    listnames <- names(is)
    if (verbose) {print(sum(i)); print(listnames)}
    if ('lon' %in% listnames) 
      i <- (lon(x) >= min(is$lon)) & (lon(x) <= max(is$lon)) 
    if ('lat' %in% listnames) 
      i <- i & (lat(x) >= min(is$lat)) & (lat(x) <= max(is$lat)) 
    if ('alt' %in% listnames) 
      i <- i & (alt(x) >= min(is$alt)) & (alt(x) <= max(is$alt))
    if ('cntr' %in% listnames) 
      #i <- i & (is.element(tolower(substr(x$country,1,nchar(is$cntr))),tolower(is$cntr)))
      i <- i & (1:(length(i)))[grep(is$cntr,x$country,ignore.case=TRUE, ...)]
    if (verbose) print(table(tolower(substr(x$country,1,nchar(is$cntr)))))
    if ('src' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$source,1,nchar(is$src))),tolower(is$src)))
    if ('param' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$element,1,nchar(is$param))),esd2ele(is$param)))
    if ('loc' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$location,1,nchar(is$loc))),tolower(is$loc)))
    is <- i
  } else if (is.numeric(is) | is.integer(is)) 
    is <- is.element(1:dim(x)[1],is) else if (is.character(is))
      is <- is.element(tolower(substr(x$location,1,nchar(is))),tolower(is))
    if (!is.null(it)) {
      is <- is & (x$start >= min(it)) & (x$end <= max(it))
    }
    if (verbose) print(paste('subset of',sum(is),'elements'))
    is <- (1:(length(i)))[is]
    if (verbose) print(str(x))
    browser()
    y <- as.data.frame(as.matrix(x[is,]))  
    if (verbose) print(dim(y))
    class(y) <- class(x)
    attr(y,'history') <- history.stamp(x)  
    if (verbose) str(y)
    return(y)
}}
\usage{
\method{subset}{stationmeta}(
  x,
  is = NULL,
  it = NULL,
  loc = NULL,
  param = NULL,
  stid = NULL,
  lon = NULL,
  lat = NULL,
  alt = NULL,
  cntr = NULL,
  src = NULL,
  nmin = NULL,
  ...,
  verbose = FALSE
)
}
\description{
subset.stationmeta <- function(x, it=NULL, is=NULL, ..., verbose=FALSE) {
  if(verbose) print(paste('subset.stationmeta: ',paste(dim(x),collapse=' - ')))
  if (is.null(is)) is <- rep(TRUE,dim(x)[1])
  if (is.list(is)) {
    i <- rep(TRUE,length(x[[1]]))
    listnames <- names(is)
    if (verbose) {print(sum(i)); print(listnames)}
    if ('lon' %in% listnames) 
      i <- (lon(x) >= min(is$lon)) & (lon(x) <= max(is$lon)) 
    if ('lat' %in% listnames) 
      i <- i & (lat(x) >= min(is$lat)) & (lat(x) <= max(is$lat)) 
    if ('alt' %in% listnames) 
      i <- i & (alt(x) >= min(is$alt)) & (alt(x) <= max(is$alt))
    if ('cntr' %in% listnames) 
      #i <- i & (is.element(tolower(substr(x$country,1,nchar(is$cntr))),tolower(is$cntr)))
      i <- i & (1:(length(i)))[grep(is$cntr,x$country,ignore.case=TRUE, ...)]
    if (verbose) print(table(tolower(substr(x$country,1,nchar(is$cntr)))))
    if ('src' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$source,1,nchar(is$src))),tolower(is$src)))
    if ('param' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$element,1,nchar(is$param))),esd2ele(is$param)))
    if ('loc' %in% listnames) 
      i <- i & (is.element(tolower(substr(x$location,1,nchar(is$loc))),tolower(is$loc)))
    is <- i
  } else if (is.numeric(is) | is.integer(is)) 
    is <- is.element(1:dim(x)[1],is) else if (is.character(is))
      is <- is.element(tolower(substr(x$location,1,nchar(is))),tolower(is))
    if (!is.null(it)) {
      is <- is & (x$start >= min(it)) & (x$end <= max(it))
    }
    if (verbose) print(paste('subset of',sum(is),'elements'))
    is <- (1:(length(i)))[is]
    if (verbose) print(str(x))
    browser()
    y <- as.data.frame(as.matrix(x[is,]))  
    if (verbose) print(dim(y))
    class(y) <- class(x)
    attr(y,'history') <- history.stamp(x)  
    if (verbose) str(y)
    return(y)
}
}
